
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007df  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ee  00000000  00000000  000009b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000285  00000000  00000000  000010a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ff  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000df  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000184a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8e:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <blinkOnBoardLED>:
 *
 * 
 * @return void
 */
void fastPWMCofig() 
{ 
  96:	95 b1       	in	r25, 0x05	; 5
  98:	89 2b       	or	r24, r25
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	83 ed       	ldi	r24, 0xD3	; 211
  a0:	90 e3       	ldi	r25, 0x30	; 48
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <blinkOnBoardLED+0xc>
  aa:	00 c0       	rjmp	.+0      	; 0xac <blinkOnBoardLED+0x16>
  ac:	00 00       	nop
  ae:	15 b8       	out	0x05, r1	; 5
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	83 ed       	ldi	r24, 0xD3	; 211
  b4:	90 e3       	ldi	r25, 0x30	; 48
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <blinkOnBoardLED+0x20>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <blinkOnBoardLED+0x2a>
  c0:	00 00       	nop
  c2:	08 95       	ret

000000c4 <main>:
}

// Main function
int main(void)
{
	DDRB |= 0x06;						// This defines the DDRx Register for PORTB. This should be 0000 0110
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	86 60       	ori	r24, 0x06	; 6
  c8:	84 b9       	out	0x04, r24	; 4
	
    /* Replace with your application code */
    while (1) 
    {
		// This blinks an led on and off. Useful for debugging and testing of the MCU control
		blinkOnBoardLED(pin5, DELAY_VAL_MS);
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	6a e7       	ldi	r22, 0x7A	; 122
  d0:	74 e4       	ldi	r23, 0x44	; 68
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	0e 94 4b 00 	call	0x96	; 0x96 <blinkOnBoardLED>
  d8:	f8 cf       	rjmp	.-16     	; 0xca <main+0x6>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
